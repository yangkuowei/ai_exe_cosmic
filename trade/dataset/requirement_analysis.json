[
  {
    "instruction": "你是一名专业的COSMIC软件需求分析师，任务是分析需求文档并输出结构化的COSMIC软件需求分析JSON。请说明在这个任务中，你需要提取的核心内容有哪些？",
    "input": "",
    "output": "在进行COSMIC软件需求分析并输出结构化JSON的任务中，我需要提取以下核心内容：\n1.  **需求名称 (`customerRequirement`)**: 文档标题或明确标示的需求名。\n2.  **需求背景 (`requirementBackground`)**: 需求原因、问题或业务场景描述。\n3.  **完整解决方案描述**: 初始提取所有方案、技术细节、接口改造、业务规则等，暂不拆分。\n4.  **需求总工作量 (`workload`)**: 通常是cosmic要求行数等，为一个整数。\n5.  **功能点 (`functionalPoints`)**: 对完整解决方案进行拆分与合并后的详细分析结果。\n6.  **建设目标 (`targets`)**: 根据解决方案分析得出的需求建设目标汇总。\n7.  **建设必要性 (`necessity`)**: 根据需求背景分析得出的需求建设必要性。"
  },
  {
    "instruction": "在进行COSMIC软件需求分析以生成结构化JSON的任务中，关于`functionalPoints`的拆分与合并规则是怎样的？特别是基于工作量的规则。",
    "input": "",
    "output": "在处理COSMIC软件需求分析并生成JSON的任务中，`functionalPoints`的拆分与合并规则如下：\n1.  **初步拆分**: 基于提取的完整解决方案描述，将整体需求拆分成多个逻辑独立的功能点。\n2.  **关键合并步骤1**: 审阅拆分后的功能点，将目标相似、处理流程高度重叠或技术实现紧密关联的功能点合并成一个。\n3.  **关键合并步骤2 (基于工作量)**: \n    *   如果提取的需求总工作量 (`workload`) 小于35，则整个需求**合并**成一个功能点。\n    *   如果需求总工作量 (`workload`) 大于等于35，则按平均每35的工作量拆分一个功能点，确保**单个功能点的工作量不能大于35**。\n最终输出的`functionalPoints`数组包含的是经过这些步骤处理后的功能点列表。"
  },
  {
    "instruction": "在生成COSMIC软件需求分析JSON时，对于`functionalPoints`数组中的每一个功能点对象，需要分析哪些详细信息？",
    "input": "",
    "output": "对于COSMIC软件需求分析JSON中的每个`functionalPoints`对象，都需要包含以下详细信息：\n1.  **功能用户 (`functionalUser`)**: 一个包含`initiator` (发起者) 和 `receiver` (接收者) 的对象。\n2.  **功能点描述 (`requirementDescription`)**: 对该功能点核心目的或操作的简洁概括。\n3.  **详细方案 (`detailedSolution`)**: 完整、详细、无删减地包含与该功能点相关的所有实现步骤、技术细节、业务规则、接口改造、参数、逻辑、配置项等，需优化表达，合并的功能点需包含所有原始细节。\n4.  **开发工作量占比 (`workloadPercentage`)**: 估算的该功能点占总工作量的百分比（0-100整数），所有功能点占比之和必须精确为100。"
  },
  {
    "instruction": "为COSMIC软件需求分析JSON中的功能点定义`functionalUser`时，`initiator`和`receiver`字段有哪些固定的可选值？它们的判断规则是什么？",
    "input": "",
    "output": "在为COSMIC软件需求分析JSON的功能点定义`functionalUser`时，`initiator`和`receiver`**只能**从以下枚举值中选择，不允许使用其他值：\n*   `操作员` (Operator): 由**人类用户**通过系统界面发起的交互。\n*   `个人网台` (Personal Portal): 由**前端系统**（如Web门户、APP、对外接口平台等）发起的交互。\n*   `订单中心` (Order Center): 处理与**订单、服务开通、业务流程**相关的逻辑。\n*   `账管中心` (Accounting Center): 处理与**账务、计费、收费、充值、财务**相关的逻辑。\n*   `产商品中心` (Product/Offering Center): 处理与**产品、商品、服务目录配置、终端设备**相关的逻辑。\n*   `后台进程` (Background Process): 由**系统自动触发**的后台任务、定时/周期/批量处理进程。\n*   `基础中心` (Foundation Center): 涉及**底层数据库结构变更（表、存储过程）、基础配置（FTP、任务调度）、通用平台能力**等。\n选择哪个值取决于该功能点交互的发起方和处理/接收方。"
  },
  {
    "instruction": "在为COSMIC软件需求分析JSON整理功能点的`detailedSolution`字段时，最重要的要求是什么？应该如何处理原始内容？",
    "input": "",
    "output": "在为COSMIC软件需求分析JSON整理`detailedSolution`字段时，最重要的要求是**严禁简化、省略或概括**。必须**完整、详细地**提取用户输入文档中与该功能点相关的**所有**实现步骤、技术细节、业务规则、接口改造细节、参数传递、系统交互逻辑、前置/后置条件、配置项（包括具体表名、字段名、标识值等）、处理逻辑分支等。在保持完整性的前提下，可以**优化表达**，允许适当补充隐含流程或描述，使其层次清晰、逻辑连贯、易于理解。如果是合并后的功能点，`detailedSolution`必须包含**所有**被合并功能点的原始详细方案内容，并清晰地组织。"
  },
  {
    "instruction": "在生成COSMIC软件需求分析的最终JSON输出时，`targets` (建设目标) 和 `necessity` (建设必要性) 字段的内容应该从哪里分析得到？",
    "input": "",
    "output": "在生成COSMIC软件需求分析JSON时，`targets` (建设目标) 应根据输入文档中的**解决方案/改造详情**内容进行分析和提炼，它是对所有功能点要达成的总体目标的汇总。`necessity` (建设必要性) 应根据输入文档中的**需求背景**部分进行分析和提炼，说明为什么需要实施这个需求。"
  },
  {
    "instruction": "请描述用于COSMIC软件需求分析结果的最终JSON数据结构应该是什么样的。",
    "input": "",
    "output": "用于COSMIC软件需求分析结果的最终JSON结构如下：\n```json\n{\n  \"customerRequirement\": \"...\", // 提取的需求名称\n  \"requirementBackground\": \"...\", // 提取的需求背景\n  \"workload\": ..., // 提取的整数需求总工作量 (通常基于COSMIC计数)\n  \"functionalPoints\": [ // 功能点数组\n    {\n      \"functionalUser\": { // 功能用户\n        \"initiator\": \"...\", // 发起者 (枚举值之一)\n        \"receiver\": \"...\"  // 接收者 (枚举值之一)\n      },\n      \"requirementDescription\": \"...\",  // 功能点简洁描述\n      \"detailedSolution\":  \"...\", // 完整详细的方案描述\n      \"workloadPercentage\": ... // 整数, 0-100, 功能点工作量占比\n    },\n    // ... 可能有更多功能点对象\n  ],\n  \"targets\": \"...\", // 分析得出的建设目标\n  \"necessity\": \"...\" // 分析得出的建设必要性\n}\n```\n所有`workloadPercentage`的总和必须精确等于100。"
  },
  {
    "instruction": "作为一名COSMIC软件需求分析师，当拿到一份需求文档时，首要提取的两个基本信息是什么？它们对应JSON中的哪些字段？",
    "input": "",
    "output": "在进行COSMIC软件需求分析时，首先需要从文档中提取：\n1.  **需求名称**: 通常是文档标题或明确标识的需求名，对应JSON中的 `customerRequirement` 字段。\n2.  **需求背景**: 描述需求提出原因、当前问题或业务场景的部分，对应JSON中的 `requirementBackground` 字段。需要确保背景信息提取全面。"
  },
  {
    "instruction": "在COSMIC软件需求分析任务中，如何准确提取需求的总工作量？它对应JSON中的哪个字段，格式是什么？",
    "input": "",
    "output": "在COSMIC软件需求分析中，需要查找文档中关于工作量估算的描述，通常标记为“cosmic要求行数”、“需求总工作量”或“cosmic表格行数”等。提取这个数值，它对应JSON中的 `workload` 字段，并且必须是一个整数。"
  },
  {
    "instruction": "在进行COSMIC软件需求分析并生成JSON时，处理“解决方案/改造详情”部分的第一步是什么？在这一步需要注意什么？",
    "input": "",
    "output": "处理“解决方案/改造详情”的第一步是**完整提取**文档中描述如何实现需求的**所有**内容，包括技术细节、接口改造、业务规则变更等。**关键注意点**：在这一初始提取阶段，**不要进行任何拆分、简化或概括**，目标是先获得一个未经处理的、完整的解决方案描述文本。"
  },
  {
    "instruction": "在COSMIC软件需求分析的功能点拆分合并规则中，如果计算出的需求总工作量 `workload` 为25，应该如何处理功能点 `functionalPoints`？",
    "input": "",
    "output": "根据COSMIC软件需求分析的功能点拆分合并规则，如果需求总工作量 `workload` 小于35（例如25），则**整个需求必须合并成一个单独的功能点**。`functionalPoints` 数组中将只包含一个对象，其 `detailedSolution` 包含完整的解决方案描述，`workloadPercentage` 为100。"
  },
  {
    "instruction": "在COSMIC软件需求分析中，如果一个需求的总工作量 `workload` 是80，并且初步拆分出了4个逻辑功能点，应该如何应用基于工作量的拆分合并规则来确定最终的 `functionalPoints`？",
    "input": "",
    "output": "如果总工作量 `workload` 为80 (>= 35)，则需要按平均约35工作量拆分功能点，且单个功能点工作量不能超过35。初步拆分的4个逻辑功能点需要进一步调整。\n1.  目标是拆分成 80 / 35 ≈ 2.28，向上取整为 3 个功能点。\n2.  需要将初步的4个功能点进行合并或调整，最终形成3个功能点。\n3.  合并时优先考虑目标相似、流程重叠或技术关联紧密的功能点。\n4.  确保最终这3个功能点的 `workloadPercentage` 之和为100，并且每个功能点隐含的工作量（可以通过百分比反推）不超过35。"
  },
  {
    "instruction": "在COSMIC软件需求分析中，除了基于工作量的合并，还有什么情况下需要将初步拆分的功能点进行合并？合并后的 `detailedSolution` 应如何处理？",
    "input": "",
    "output": "除了基于工作量的强制合并规则外，还需要审阅初步拆分的功能点，识别出**目标相似、处理流程高度重叠或技术实现紧密关联**的功能点，并将它们合并成一个功能点。例如，多个针对不同类型但处理逻辑基本一致的配置项修改，可以合并。合并后，该功能点的 `detailedSolution` **必须包含所有被合并功能点的原始详细方案内容**，并清晰地组织（如使用编号或子标题区分），不能丢失任何细节。"
  },
  {
    "instruction": "在为COSMIC软件需求分析JSON的功能点编写 `detailedSolution` 时，有哪些内容是必须包含的？强调一下绝对不能做什么。",
    "input": "",
    "output": "`detailedSolution` 必须**完整且详细**地包含与该功能点相关的所有信息，例如：\n*   实现步骤\n*   技术细节（如类名、方法名）\n*   业务规则（包括变更前后的对比）\n*   接口改造细节（输入输出参数、地址变更等）\n*   参数传递逻辑\n*   系统交互流程\n*   前置/后置条件\n*   配置项（表名、字段名、标识值、枚举值等）\n*   处理逻辑分支（if-else等）\n*   界面元素（如有）\n**绝对不能做的是：简化、省略、概括或遗漏文档中提到的任何相关细节。** 可以优化表达使其更清晰，但不能减少信息量。"
  },
  {
    "instruction": "假设一个COSMIC软件需求分析的功能点描述为“系统后台每日定时核对A表和B表数据一致性”。请根据规则判断其 `functionalUser` 的 `initiator` 和 `receiver` 应该是什么？",
    "input": "",
    "output": "对于“系统后台每日定时核对A表和B表数据一致性”这个功能点：\n*   **发起者 (`initiator`)**: 因为是“系统后台每日定时”触发，不是人工操作或前端系统调用，所以发起者是 `后台进程` (Background Process)。\n*   **接收者 (`receiver`)**: 这个功能的核心是处理数据核对逻辑，可能涉及数据库查询和比较。如果主要是数据层面的操作和基础逻辑，可以认为是 `基础中心` (Foundation Center)。如果这个核对是某个特定业务流程（如订单、账务）的一部分，则可能是对应的中心（`订单中心` 或 `账管中心`）。需要根据具体上下文判断，但 `基础中心` 在仅描述数据核对时更常见。"
  },
  {
    "instruction": "在COSMIC软件需求分析JSON中，`functionalPoints` 数组里所有功能点的 `workloadPercentage` 字段总和有什么要求？这个百分比是如何确定的？",
    "input": "",
    "output": "所有功能点的 `workloadPercentage` **总和必须精确等于100**。这个百分比是根据每个功能点相对于整个需求总工作量 (`workload`) 的估算比例来确定的。它反映了各个功能点在开发实现上预计投入资源的相对大小。如果是合并后的功能点，其 `workloadPercentage` 应为被合并功能点百分比之和。最终需要调整各功能点百分比，确保总和为100。"
  },
  {
    "instruction": "在完成COSMIC软件需求分析并生成JSON后，如何填写 `targets` (建设目标) 和 `necessity` (建设必要性) 字段？它们的信息来源是什么？",
    "input": "",
    "output": "`targets` (建设目标) 需要**基于整个需求的解决方案/改造详情**进行总结和提炼，描述通过实现所有功能点最终要达到的业务或技术目标。它是对`functionalPoints`所实现功能的整体性概括。\n`necessity` (建设必要性) 需要**基于需求背景 (`requirementBackground`)** 进行分析和阐述，说明为什么要做这个需求，解决了什么痛点，满足了什么业务发展需要等。"
  },
  {
    "instruction": "在COSMIC软件需求分析中，如果需求文档的“解决方案”章节描述了一个由操作员在界面上触发，最终修改了产品目录配置表的流程，`functionalUser`的`initiator`和`receiver`分别是什么？",
    "input": "",
    "output": "根据规则：\n*   **发起者 (`initiator`)**: 因为是由“操作员在界面上触发”，所以发起者是 `操作员` (Operator)。\n*   **接收者 (`receiver`)**: 因为最终操作目标是“修改了产品目录配置表”，这属于产品、商品、服务目录配置的管理范畴，所以接收者是 `产商品中心` (Product/Offering Center)。"
  },
  {
    "instruction": "进行COSMIC软件需求分析时，如果需求文档描述了一个前端门户调用后端接口，完成用户订单提交的功能，`functionalUser`的`initiator`和`receiver`应如何确定？",
    "input": "",
    "output": "根据规则：\n*   **发起者 (`initiator`)**: 因为交互是由“前端门户调用后端接口”发起的，前端门户属于前端系统，所以发起者是 `个人网台` (Personal Portal)。\n*   **接收者 (`receiver`)**: 因为功能是“完成用户订单提交”，涉及订单和业务流程处理，所以接收者是 `订单中心` (Order Center)。"
  },
  {
    "instruction": "在COSMIC软件需求分析中，如果一个功能点涉及修改数据库表结构（如新增字段），`functionalUser`的`initiator`和`receiver`通常是什么？",
    "input": "",
    "output": "根据规则：\n*   **发起者 (`initiator`)**: 修改数据库结构通常不是由最终用户或特定业务中心直接触发的，而是开发或运维层面的基础变更。如果是由部署脚本或后台配置过程执行，可以认为是 `后台进程` (Background Process) 或 `基础中心` (Foundation Center) 发起（取决于具体触发方式，但更倾向于后者代表基础能力变更）。如果是由DBA通过工具执行，则不直接映射到这些枚举，但分析时关注的是系统层面的交互，`基础中心` 作为接收方更合适。\n*   **接收者 (`receiver`)**: 因为涉及“修改数据库表结构”，这属于底层基础能力的变更，所以接收者是 `基础中心` (Foundation Center)。"
  },
  {
    "instruction": "COSMIC软件需求分析要求 `detailedSolution` 必须完整详细。如果原始文档描述了一个接口改造，只写了“接口A增加参数X”，我应该如何在 `detailedSolution` 中补充？",
    "input": "",
    "output": "仅仅“接口A增加参数X”是不够详细的。根据规则，`detailedSolution` 需要补充隐含的流程和细节，使其完整。你应该补充：\n1.  **接口A的标识**: 明确是哪个接口（如URL、服务名、方法名）。\n2.  **参数X的细节**: 参数名、数据类型、是否必填、参数含义或用途、示例值（如果文档有或可推断）。\n3.  **接口调用方**: 需要明确调用方是否需要同步修改以传递新参数。\n4.  **接口提供方**: 描述提供方如何接收和处理这个新参数，对业务逻辑有何影响。\n5.  **版本变更**: 是否涉及接口版本号的变更。\n6.  **错误处理**: 新参数引入后，错误处理逻辑是否有变化。\n目标是让开发者能清晰理解接口改造的全部细节，即使原始文档描述简略。"
  },
  {
    "instruction": "在COSMIC软件需求分析中，如果一个功能点是通过合并两个相似的配置修改功能（如修改A类配置和B类配置）得到的，其 `detailedSolution` 应该如何组织以体现合并关系并保持清晰？",
    "input": "",
    "output": "合并后的 `detailedSolution` 必须包含所有原始细节，并清晰组织。推荐方式：\n1.  **使用子标题或编号**: 明确区分是针对A类配置的修改还是B类配置的修改。\n    例如：\n    \"1. A类配置修改：\n       - 涉及表：config_a\n       - 修改字段：value_a\n       - 业务规则：...\n     2. B类配置修改：\n       - 涉及表：config_b\n       - 修改字段：value_b\n       - 业务规则：...\"\n2.  **提取共性，描述差异**: 如果两类配置修改有共通的处理逻辑，可以先描述共通部分，再分别描述各自的差异点（如涉及的表、字段、特定规则）。\n关键是确保**所有原始信息无遗漏**，并且逻辑结构清晰，易于理解每个子部分的细节。"
  },
  {
    "instruction": "COSMIC软件需求分析规则要求 `workloadPercentage` 总和精确为100。如果初步估算后，各功能点百分比之和为99或101，应该如何调整？",
    "input": "",
    "output": "如果 `workloadPercentage` 初步估算总和不为100，必须进行调整以确保精确等于100。调整方法：\n1.  **按比例微调**: 将差额（1%）按比例分配给各个功能点，通常优先分配给占比较大的功能点，或根据实际判断哪个功能点的估算可能存在微小偏差。\n2.  **指定调整**: 如果能明确哪个功能点的估算最不确定，可以将差额主要调整到该功能点上。\n3.  **避免四舍五入误差累积**: 在计算百分比时，尽量保持精度，最后一步再进行取整和调整，确保最终加和为100。不允许出现总和为99或101的情况。"
  },
  {
    "instruction": "在COSMIC软件需求分析中，`requirementDescription` 和 `detailedSolution` 的主要区别是什么？前者应该包含什么内容？",
    "input": "",
    "output": "主要区别在于详细程度和目的：\n*   **`requirementDescription`**: 是对该功能点**核心目的或操作的简洁概括**。它应该用一两句话清晰地说明这个功能点“做什么”或“实现了什么目标”，让读者快速理解其核心价值。例如：“新增XX类型订单的自动审批功能”。\n*   **`detailedSolution`**: 是对该功能点**如何实现**的**完整、详细描述**。它包含所有技术细节、业务规则、步骤、接口、配置等，是开发人员直接参考的依据。它回答的是“怎么做”。\n前者是高度总结，后者是细节展开。"
  },
  {
    "instruction": "进行COSMIC软件需求分析时，如果需求文档提到需要新增一个FTP服务器配置用于文件传输，这个改造应归属到哪个功能用户（`receiver`）？",
    "input": "",
    "output": "新增FTP服务器配置属于基础环境或平台能力的配置变更，不直接关联特定的业务中心（订单、账务、产品）。根据规则，这种涉及**基础配置（如FTP、任务调度）、通用平台能力**的变更，其 `receiver` 应归类为 `基础中心` (Foundation Center)。"
  },
  {
    "instruction": "在COSMIC软件需求分析中，如果需求总工作量 `workload` 正好是35，是应该拆分还是合并成一个功能点？",
    "input": "",
    "output": "规则是：“如果需求总工作量 (`workload`) **小于35**，则整个需求合并成一个功能点。” 以及 “如果需求总工作量大于等于35，则按平均每35的工作量拆分一个功能点，一个功能点的工作量不能大于35”。因此，如果 `workload` **正好等于35**，它不满足“小于35”的合并条件，但满足“大于等于35”的拆分条件基础。同时，规则要求“一个功能点的工作量不能大于35”。这意味着，如果总工作量是35，它本身就构成了一个大小恰好符合上限的功能点。所以，当 `workload` 为35时，应该将其视为**一个单独的功能点**，`functionalPoints` 数组包含一个对象，`workloadPercentage` 为100。"
  },
  {
    "instruction": "在COSMIC软件需求分析中，如果需求文档描述了一个批量处理任务，用于夜间自动计算用户积分，`functionalUser` 的 `initiator` 和 `receiver` 分别是什么？",
    "input": "",
    "output": "根据规则：\n*   **发起者 (`initiator`)**: 因为是“批量处理任务，用于夜间自动计算”，这是由系统自动触发的后台任务，所以发起者是 `后台进程` (Background Process)。\n*   **接收者 (`receiver`)**: 功能是“计算用户积分”。积分通常与用户的账务或权益相关，因此接收者更可能是 `账管中心` (Accounting Center)。如果积分系统是独立的产品或服务配置，则可能是 `产商品中心` (Product/Offering Center)。需要根据具体系统的积分管理归属来判断，但 `账管中心` 通常更相关。"
  },
  {
    "instruction": "进行COSMIC软件需求分析时，`targets` (建设目标) 字段应该如何编写？它和 `functionalPoints` 的 `requirementDescription` 有什么关系？",
    "input": "",
    "output": "`targets` (建设目标) 应该**总结整个需求实现后达到的总体业务或技术效果**。它应该比单个功能点的 `requirementDescription` 更宏观、更综合。可以理解为，`targets` 是所有 `requirementDescription` 所共同指向的、更高层次的目标集合或最终成果描述。例如，如果功能点描述是“新增A订单处理”、“优化B接口性能”，那么 `targets` 可能是“提升X业务处理效率，优化系统Y的响应速度，支撑Z业务发展”。"
  },
  {
    "instruction": "在COSMIC软件需求分析中，如果需求文档的背景部分描述了“当前手工处理XX业务效率低下，易出错”，这部分信息主要用于生成JSON中的哪个字段？",
    "input": "",
    "output": "这部分描述了需求提出的原因和当前存在的问题，直接反映了需求的必要性。因此，这部分信息主要用于分析和编写JSON中的 `necessity` (建设必要性) 字段。同时，它也是 `requirementBackground` (需求背景) 字段的核心内容。"
  },
  {
    "instruction": "COSMIC软件需求分析要求 `detailedSolution` 允许适当补充隐含流程。如果文档只说“调用接口C”，但根据上下文知道调用前需要先获取Token，是否应在 `detailedSolution` 中补充？",
    "input": "",
    "output": "是的，**应该补充**。根据规则，“允许对其做适当补充，补充隐含流程、描述等”。如果获取Token是调用接口C的必要前置步骤或隐含流程，为了确保 `detailedSolution` 的完整性和可执行性，就应该明确补充这一步骤，例如：“1. 调用认证服务获取访问Token。 2. 使用获取的Token调用接口C，并传递参数...” 这样能让方案更清晰、无歧义。"
  },
  {
    "instruction": "在COSMIC软件需求分析中，如果一个功能点涉及前端界面的修改，比如增加一个按钮并调整布局，`detailedSolution` 需要描述到什么程度？",
    "input": "",
    "output": "`detailedSolution` 需要描述清楚界面修改的**具体内容和行为**，至少应包括：\n1.  **界面位置**: 明确在哪个页面或哪个区域进行修改。\n2.  **新增元素**: 描述新增按钮的标签文字、ID（如果前端需要）、大致位置。\n3.  **布局调整**: 清晰说明哪些元素的位置或大小发生了变化，如何变化。\n4.  **按钮行为**: 描述点击按钮后触发的操作或逻辑（例如，调用哪个接口、执行什么前端校验、跳转到哪里等）。\n5.  **视觉样式**: 如果有特定的样式要求（颜色、图标等），也应说明。\n目标是让前端开发人员能准确理解并实现界面修改。"
  },
  {
    "instruction": "进行COSMIC软件需求分析时，如果需求文档中包含一个表格，列出了需要修改的多个配置项及其新值，应如何将这个表格内容整合进 `detailedSolution`？",
    "input": "",
    "output": "应将表格中的**所有信息完整、清晰地**整合到对应功能点的 `detailedSolution` 中。推荐方式：\n1.  **直接转述**: 将表格内容以列表或结构化文本的形式复述出来，例如：\n    \"配置项修改详情：\n    - 配置项A (表X, 字段Y): 旧值 Z -> 新值 W\n    - 配置项B (表P, 字段Q): 新增记录，值为 R\n    - ...\"\n2.  **引用说明**: 如果表格非常大，可以在 `detailedSolution` 中简要说明修改内容，并明确引用原始文档中的表格编号或名称，但**强烈推荐将核心信息直接包含进来**，以保证 `detailedSolution` 的自包含性。\n关键是确保所有配置项、表名、字段名、旧值、新值等细节**无一遗漏**。"
  },
  {
    "instruction": "在COSMIC软件需求分析中，如果一个功能点的 `initiator` 是 `操作员`，`receiver` 是 `账管中心`，请给出一个符合这个场景的 `requirementDescription` 示例。",
    "input": "",
    "output": "一个符合 `initiator: 操作员`, `receiver: 账管中心` 的 `requirementDescription` 示例可以是：“允许客服操作员手动为特定用户执行退款操作” 或 “提供界面供财务操作员查询并导出指定时间段的对账单”。这些描述都体现了由人类用户通过界面发起，最终由处理账务相关逻辑的中心来完成。"
  },
  {
    "instruction": "COSMIC软件需求分析要求功能点的工作量不能大于35。如果一个逻辑上不可再拆分的功能点，经过初步评估其工作量为40，该如何处理？",
    "input": "",
    "output": "这是一个规则冲突的情况。规则要求“一个功能点的工作量不能大于35”。如果一个逻辑上确实无法再拆分的单元评估出来是40，理论上不符合规则。处理方式可能需要：\n1.  **重新评估**: 仔细复核该功能点的范围和复杂度，看是否真的无法细化或拆分出更小的、工作量<=35的步骤或子功能。也许可以将数据准备、核心处理、结果通知等环节视为不同的数据移动（如果符合COSMIC的数据移动定义）。\n2.  **标记并说明**: 如果经过努力确实无法拆分，且评估结果坚持为40，应在分析结果中（可能在 `detailedSolution` 或额外注释中）明确标记此情况，说明其逻辑上的原子性和评估结果，并指出其工作量超出了单点35的限制。最终可能需要与需求管理或度量团队沟通确认如何记录这种情况。\n严格按规则，是不允许出现>35的功能点的，需要尽力拆分或重新定义功能点边界。"
  },
  {
    "instruction": "在COSMIC软件需求分析中，`requirementBackground` 和 `necessity` 都源于需求背景描述，它们在最终JSON中的侧重点有何不同？",
    "input": "",
    "output": "虽然都源于背景描述，但侧重点不同：\n*   **`requirementBackground`**: 目标是**全面、客观地复述**文档中关于需求提出的背景信息，包括当前的业务状况、存在的问题、相关的业务场景等。它更侧重于“是什么情况”。\n*   **`necessity`**: 目标是**提炼和论证**为什么需要做这个需求，强调其紧迫性、重要性或价值。它更侧重于“为什么要做”，是对背景信息中问题的直接回应，说明实施需求能带来的好处或解决的痛点。"
  },
  {
    "instruction": "进行COSMIC软件需求分析时，如果需求文档描述了一个对外提供的RESTful API接口的新增需求，`functionalUser` 的 `initiator` 和 `receiver` 通常是什么？",
    "input": "",
    "output": "根据规则：\n*   **发起者 (`initiator`)**: 对外提供的API接口通常由外部系统或客户端调用，这些可以泛称为“前端系统”或对外交互的门户。因此，发起者通常是 `个人网台` (Personal Portal)。\n*   **接收者 (`receiver`)**: 取决于该API接口提供的具体功能。如果接口用于下单，接收者是 `订单中心`；如果用于查询账单，是 `账管中心`；如果用于获取产品信息，是 `产商品中心`。需要根据API的业务领域来确定接收者。"
  },
  {
    "instruction": "在COSMIC软件需求分析的JSON输出中，`customerRequirement` 字段应该包含什么内容？如果文档没有明确的“需求名称”章节怎么办？",
    "input": "",
    "output": "`customerRequirement` 字段应包含从文档中提取的**明确标示的需求名称或文档标题**。如果文档中没有明确的“需求名称”章节或标签，应使用该需求规格说明书的**主标题**作为 `customerRequirement` 的内容。目标是为这个需求提供一个唯一的、易于识别的名称。"
  }
]
